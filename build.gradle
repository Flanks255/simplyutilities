plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.23'
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

def ENV = System.getenv()
version = "${mod_version}+mc${minecraft_version}-b${ENV.GITHUB_RUN_NUMBER ?: 9999}"
group = 'com.flanks255'
base {
    archivesName = "simplyutilities"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.hasProperty("parchment_minecraft_version") ? project.parchment_minecraft_version : project.minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', "simplyutilities"
            programArguments.addAll('--width', '1280', '--height', '720')
            if  (ENV.MCDEVUSER) {
                programArguments.addAll('--username', ENV.MCDEVUSER)
            }
            if (ENV.MCDEVUUID) {
                programArguments.addAll('--uuid', ENV.MCDEVUUID)
            }
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', "simplyutilities"
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', "simplyutilities"
        }

        data {
            data()
            programArguments.addAll '--mod', "simplyutilities", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach { run ->
            jvmArgument '-Xmx8G'
            if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
                run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
            }
        }
    }

    mods {
        "simplyutilities" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven { url = 'https://maven.creeperhost.net/' }
    maven { url = 'https://www.cursemaven.com' }
    maven { url = 'https://maven.theillusivec4.top/' }
    maven { url = 'https://maven.saps.dev/releases' }
}


dependencies {
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

/*    runtimeOnly "curse.maven:MCJTY-233105:3920706"
    runtimeOnly "curse.maven:RFTB-326041:3920710"
    runtimeOnly "curse.maven:RFTBUILD-347706:3920725"
    compileOnly "curse.maven:RFTBUILD-347706:3920725"*/
}

jar {
    group = 'artifact'
    manifest {
        attributes([
            "Specification-Title": "simplyutilities",
            "Specification-Vendor": "Flanks255",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Flanks255",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from sourceSets.main.output
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
        loader_version:loader_version,
        mod_version:mod_version
    ]

    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.java
    archiveClassifier.set('sources')
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java

            artifact sourcesJar
        }
    }

    repositories {
        def saps_token = providers.environmentVariable("SAPS_TOKEN")
        if (saps_token.isPresent()) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "flanks"
                    password = saps_token.get()
                }
            }
        }
    }
}

// From Mikey
/**
 * Seek out the changelog for the current version and return it as a string.
 */
def createChangelog = () -> {
    def changelogText = new File("CHANGELOG.md").text
    def changelog = ""

    def lines = changelogText.split("\n")
    def inChangelog = false
    for (int i = 0; i < lines.size(); i++) {
        def line = lines[i]
        if (line.startsWith("# ")) {
            if (inChangelog) {
                break
            } else {
                if (line.contains(mod_version)) {
                    inChangelog = true
                }
            }
        }

        if (inChangelog) {
            changelog += line + "\n"
        }
    }

    def output = changelog.trim()
    return output.empty ? "No changelog found" : output
}

def cfToken = providers.environmentVariable("CURSEFORGE_KEY")
def ghToken = providers.environmentVariable("GITHUB_TOKEN")

//https://modmuss50.github.io/mod-publish-plugin/
publishMods {
    dryRun = !cfToken.isPresent() || !ghToken.isPresent()
    file = jar.archiveFile
    changelog = createChangelog().trim()
    modLoaders.add("NeoForge")
    type = BETA

    additionalFiles.from sourcesJar.archiveFile

    curseforge {
        accessToken = cfToken
        projectId = curseforge_id
        minecraftVersions.add(minecraft_version)
        javaVersions.add(JavaVersion.VERSION_21)
    }

    github {
        repository = "Flanks255/simplyutilities"
        accessToken = ghToken
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}